$max-grid-columns : 20;

:root {
  --gap : #{$gap * 0.5};

  @include from(l) {
    --gap : #{$gap};
  }
}

// Calcula ancho de cada columna
@mixin grid-column-width($i) {
  // La cantidad de gaps es igual a la cantidad de columnas menos 1
  $n : #{$i - 1};
  // Formula para calcular el ancho de cada columna
  $column-width : calc((100% - var(--gap) * #{$n}) / #{$i});
  // Define las columnas en el contenedor
  grid-template-columns : repeat($i, $column-width);
}

.ed-grid {
  display               : grid;
  grid-template-columns : 100%;
  grid-column-gap       : var(--gap);

  // Evita que en tamaños moviles los items queden pegados a los lados
  width                 : calc(100vw - var(--gap) * 2);
  margin-left           : 1rem;
  margin-right          : 1rem;

  @include from(l) {
    width : calc(100vw - var(--gap));
  }

  // Por sobre el max width el container se centra
  @include from($max-width) {
    width        : $max-width;
    margin-left  : auto;
    margin-right : auto;
  }

  // Agrega separación vertical entre filas
  &.row-gap,
  &.rows-gap {
    grid-row-gap : var(--gap);
  }

  // Para containers hijos de otro container o con clase full
  // se elimninan los márgenes y se ocupa todo_ el ancho disponible
  .ed-grid,
  &.full {
    width        : 100%;
    max-width    : 100%;
    margin-right : 0;
    margin-left  : 0;
  }

  // Define columnas en containers e items por breakpoint
  @each $size, $screen-size in $breakpoints {
    // Estilos por breakpoint
    @include from($size) {
      // Recorre la cantidad de columnas
      @for $i from 2 through $max-grid-columns {
        // Columnas en el contenedor
        &.cols-#{$size}-#{$i},
        &.#{$size}-cols-#{$i} {
          @include grid-column-width($i);
        }
        // Columnas en los items
        > .span-#{$size}-#{$i},
        > .#{$size}-span-#{$i} {
          grid-column : span $i;
        }
        // Inicio de columna en items
        > .#{$size}-start-#{$i} {
          grid-column-start : $i;
        }
      }
    }
  }
}
